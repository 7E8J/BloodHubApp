generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum BloodType {
  A_POSITIVE
  B_POSITIVE
  O_POSITIVE
  AB_POSITIVE
  A_NEGATIVE
  B_NEGATIVE
  O_NEGATIVE
  AB_NEGATIVE
}

enum Prefix {
  Mr
  Ms
  Mrs
}

enum Gender {
  MALE
  FEMALE
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  citizenId     String    @unique
  citizenBack   String    @unique
  prefix        Prefix
  firstName     String
  lastName      String
  phoneNumber   String    @unique
  password      String
  dob           DateTime
  profileImage  String?
  bloodType     BloodType?
  gender        Gender?
  weight        Float?
  height        Float?
  disease       String?
  created_at    DateTime   @default(now())
  updated_at    DateTime   @updatedAt

  address        Address?
  appointments   Appointment[]
  bookmarks      Bookmark[]
  posts          Post[]
  donationHistory DonationHistory[]
}

model Address {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  houseNo     String
  moo         String
  soi         String
  subDistrict String?
  district    String?
  province    String?
  country     String?
  postcode    String?
  userId      String   @unique @db.ObjectId
  user        User     @relation(fields: [userId], references: [id])
}

enum CaseType {
  NORMAL
  EMERGENCY
}
model News {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  image       String
  title       String
  description String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Post {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  image         String?
  description   String
  phone_number  String
  bloodType     BloodType
  case          CaseType
  userId        String      @db.ObjectId
  user          User        @relation(fields: [userId], references: [id])
  appointments  Appointment[]
  bookmarks     Bookmark[]
}

model Bookmark {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  postId String @db.ObjectId
  userId String @db.ObjectId
  post   Post   @relation(fields: [postId], references: [id])
  user   User   @relation(fields: [userId], references: [id])
}

// model Reservation_Slots {
//   id           String    @id @unique @default(cuid())
//   reserve_date DateTime
//   reserve_time DateTime
//   created_at   DateTime  @default(now())
//   updated_at   DateTime?
//   cancelled_at DateTime?
//   place_id     String
// }

enum AppointmentStatus {
  Pending
  Completed
  Cancelled
}

model Appointment {
  id          String             @id @default(auto()) @map("_id") @db.ObjectId
  status      AppointmentStatus
  postId      String @db.ObjectId
  donatorId   String @db.ObjectId
  cancelled_at DateTime?
  created_at  DateTime           @default(now())

  donator User @relation(fields: [donatorId], references: [id])
  post    Post @relation(fields: [postId], references: [id])
}

model Hospital {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  hospitalName String
  hospitalImg  String
  bloodNeed    BloodNeed?
}

model BloodNeed {
  id                String @id @default(auto()) @map("_id") @db.ObjectId
  aPositiveNeed     Int
  bPositiveNeed     Int
  oPositiveNeed     Int
  abPositiveNeed    Int
  aPositiveReceive  String
  bPositiveReceive  String
  oPositiveReceive  String
  abPositiveReceive String
  aNegativeNeed     Int
  bNegativeNeed     Int
  oNegativeNeed     Int
  abNegativeNeed    Int
  hospitalId        String @unique @db.ObjectId
  hospital          Hospital @relation(fields: [hospitalId], references: [id])
}

enum DonationStatus {
  PENDING
  APPOINTED
  DENIED
}

model DonationHistory {
  id         String @id @default(auto()) @map("_id") @db.ObjectId
  blood_type BloodType
  status     DonationStatus
  updated_at DateTime? @updatedAt
  created_at DateTime  @default(now())
  userId     String  @db.ObjectId
  user       User    @relation(fields: [userId], references: [id])
}

// enum DonationStatus {
//   PENDING
//   APPOINTED
//   DENIED
// }

// model Donation_History {
//   id         String         @id @unique @default(cuid())
//   blood_type BloodType
//   status     DonationStatus
//   created_at DateTime       @default(now())
//   updated_at DateTime?
//   deleted_at DateTime?
// }
