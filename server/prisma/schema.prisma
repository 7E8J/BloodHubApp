generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum BloodType {
  A_POSITIVE
  B_POSITIVE
  O_POSITIVE
  AB_POSITIVE
  A_NEGATIVE
  B_NEGATIVE
  O_NEGATIVE
  AB_NEGATIVE
}

enum Prefix {
  Mr
  Ms
  Mrs
}

enum Gender {
  MALE
  FEMALE
}

model User {
  id           String   @id @default(cuid())
  citizenId    String   @unique
  citizenBack  String   @unique
  profileImage String?
  prefix       String
  firstName    String
  lastName     String
  email        String   @unique
  phoneNumber  String   @unique
  password     String
  bloodType    String
  dob          DateTime
  gender       String
  weight       Float?
  height       Float
  disease      String?
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt
  address      Address  @relation(fields: [addressId], references: [id])
  addressId    String   @unique
  post         Post[]
}

model Address {
  id          String  @id @default(cuid())
  houseNo     String
  moo         String
  soi         String
  subDistrict String?
  district    String?
  province    String?
  country     String?
  postcode    String?
  user        User?
}

enum caseType {
  NORMAL
  EMERGENCY
}
model News {
  id          String   @id @unique @default(cuid())
  title       String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  deleted_at  DateTime
}
model Post {
  id           String     @id @unique @default(cuid())
  image        String?
  description  String?
  phone_number String?    @unique
  bloodType    BloodType?
  case         caseType?
  user         User?      @relation(fields: [userId], references: [id])
  userId       String     @unique
  appointment_id Appointment?
}



// model Reservation_Slots {
//   id           String    @id @unique @default(cuid())
//   reserve_date DateTime
//   reserve_time DateTime
//   created_at   DateTime  @default(now())
//   updated_at   DateTime?
//   cancelled_at DateTime?
//   place_id     String
// }

enum AppointmentStatus {
  Pending
  Completed
  Cancelled
}

model Appointment {
  id                  String            @id @unique @default(cuid())
  status              AppointmentStatus
  created_at          DateTime          @default(now())
  cancelled_at        DateTime?
  reservation_slot_id String            @unique
  donator_id          String
  post Post @relation(fields: [postId], references: [id])
  postId String @unique
}

model Hospital{
  id String @id @unique
  hospitalImage String
  hospitalName String
}

model BloodNeed{
  id String @id @unique
  aPositiveNeed Int
  bPositiveNeed Int
  oPositiveNeed Int
  abPositiveNeed Int
  aPositiveRecieve String
  bPositiveRecieve String
  oPositiveRecieve String
  abPositiveRecieve String
  aNegativeNeed Int
  bNegativeNeed Int
  oNegativeNeed Int
  abNegativeNeed Int
}
// enum DonationStatus {
//   PENDING
//   APPOINTED
//   DENIED
// }

// model Donation_History {
//   id         String         @id @unique @default(cuid())
//   blood_type BloodType
//   status     DonationStatus
//   created_at DateTime       @default(now())
//   updated_at DateTime?
//   deleted_at DateTime?
// }
