generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum BloodType {
  A_POSITIVE
  B_POSITIVE
  O_POSITIVE
  AB_POSITIVE
  A_NEGATIVE
  B_NEGATIVE
  O_NEGATIVE
  AB_NEGATIVE
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  citizenId     String    @unique
  citizenBack   String    @unique
  prefix        String
  firstName     String
  lastName      String
  phoneNumber   String?
  email         String    @unique
  password      String
  dob           DateTime
  profileImage  String?
  bloodType     BloodType?
  gender        String?
  weight        String?
  height        String?
  disease       String?

  newsNoti Boolean   @default(false)
  emergencyNoti Boolean   @default(false)
  generalNoti Boolean   @default(false)

  verified      Boolean   @default(false)
  created_at    DateTime   @default(now())
  updated_at    DateTime   @updatedAt

  verifications Verifications?
  address        Address?
  appointments   Appointment[]
  bookmarkPost      BookmarkPost[]
  bookmarkNews      BookmarkNews[]
  posts          Post[]
  donations      Donation[]
  donationHistory DonationHistory[]
  reservationSlot ReservationSlot[]
}

model Address {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  latitude    Float
  longitude   Float
  address     String?
  userId      String   @unique @db.ObjectId
  user        User     @relation(fields: [userId], references: [id])
}

enum CaseType {
  NORMAL
  EMERGENCY
}
model News {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  image       String
  title       String
  description String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  bookmarks   BookmarkNews[]
}

model Post {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  image         String?
  description   String
  phoneNumber   String
  bloodType     BloodType
  case          CaseType
  address       String
  userId        String      @db.ObjectId
  createdAt     DateTime    @default(now())
  user          User        @relation(fields: [userId], references: [id])
  appointments  Appointment[]
  bookmarks     BookmarkPost[]
  donation      Donation[]
  donationHistory DonationHistory[]
  reservationSlot ReservationSlot[]
}

model BookmarkPost {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  postId String @db.ObjectId
  userId String @db.ObjectId
  post   Post   @relation(fields: [postId], references: [id])
  user   User   @relation(fields: [userId], references: [id])
}

model BookmarkNews {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  newId  String @db.ObjectId
  userId String @db.ObjectId
  news   News   @relation(fields: [newId], references: [id])
  user   User   @relation(fields: [userId], references: [id])
}

enum AppointmentStatus {
  Pending
  Completed
  Cancelled
}

model Appointment {
  id          String             @id @default(auto()) @map("_id") @db.ObjectId
  status      AppointmentStatus
  postId      String @db.ObjectId
  donatorId   String @db.ObjectId
  cancelled_at DateTime?
  created_at  DateTime           @default(now())

  donator User @relation(fields: [donatorId], references: [id])
  post    Post @relation(fields: [postId], references: [id])
}

model Hospital {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  hospitalName String
  image        String
  location     String
  link         String
  createdAt    DateTime @default(now())
}

model BloodNeed {
  id                String @id @default(auto()) @map("_id") @db.ObjectId
  aPositiveNeed     Int
  bPositiveNeed     Int
  oPositiveNeed     Int
  abPositiveNeed    Int
  aPositiveReceive  String
  bPositiveReceive  String
  oPositiveReceive  String
  abPositiveReceive String
  aNegativeNeed     Int
  bNegativeNeed     Int
  oNegativeNeed     Int
  abNegativeNeed    Int
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model ReservationSlot {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  userId    String @db.ObjectId
  donatorId String @db.ObjectId
  postId    String @db.ObjectId
  donationId String @db.ObjectId
  donationHistoryId String @db.ObjectId
  status    DonationStatus @default(PENDING)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [donatorId], references: [id])
  post Post @relation(fields: [postId], references: [id])
  donation Donation @relation(fields: [donationId], references: [id])
  donationHistory DonationHistory @relation(fields: [donationHistoryId], references: [id])
}

enum DonationStatus {
  PENDING
  APPOINTED
  DENIED
}

model Donation {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  status    DonationStatus @default(PENDING)
  userId    String @db.ObjectId
  postId    String @db.ObjectId
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  user User @relation(fields: [userId], references: [id])
  post Post @relation(fields: [postId], references: [id])
  reservationSlot ReservationSlot[]
}

model DonationHistory {
  id         String @id @default(auto()) @map("_id") @db.ObjectId
  status     DonationStatus @default(PENDING)
  userId     String  @db.ObjectId
  postId     String  @db.ObjectId
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  post       Post    @relation(fields: [postId], references: [id])
  user       User    @relation(fields: [userId], references: [id])
  reservationSlot ReservationSlot[]
}

model Verifications {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  otp            String
  email         String
  userId         String   @unique @db.ObjectId
  user           User     @relation(fields: [userId], references: [id])
  created_at     DateTime @default(now())
}

model Notification {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  title String
  description String
  seen Boolean @default(false)
  postId String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}